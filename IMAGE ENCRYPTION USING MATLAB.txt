function varargout = untitled(varargin)% UNTITLED MATLAB code for untitled.fig% UNTITLED, by itself, creates a new UNTITLED or raises the existing% singleton*.%% H = UNTITLED returns the handle to a new UNTITLED or the handle to% the existing singleton*.%% UNTITLED('CALLBACK',hObject,eventData,handles,...) calls the local% function named CALLBACK in UNTITLED.M with the given input arguments.%% UNTITLED('Property','Value',...) creates a new UNTITLED or raises the% existing singleton*. Starting from the left, property value pairs are% applied to the GUI before untitled_OpeningFcn gets called. An% unrecognized property name or invalid value makes property application% stop. All inputs are passed to untitled_OpeningFcn via varargin.%% *See GUI Options on GUIDE's Tools menu. Choose "GUI allows only one% instance to run (singleton)".%% See also: GUIDE, GUIDATA, GUIHANDLES% Edit the above text to modify the response to help untitled49% Last Modified by GUIDE v2.5 02-May-2023 14:31:53% Begin initialization code - DO NOT EDITgui_Singleton = 1;gui_State = struct('gui_Name', mfilename, ... 'gui_Singleton', gui_Singleton, ... 'gui_OpeningFcn', @untitled_OpeningFcn, ... 'gui_OutputFcn', @untitled_OutputFcn, ... 'gui_LayoutFcn', [] , ... 'gui_Callback', []);if nargin && ischar(varargin{1}) gui_State.gui_Callback = str2func(varargin{1});endif nargout [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});else gui_mainfcn(gui_State, varargin{:});end% End initialization code - DO NOT EDIT% --- Executes just before untitled is made visible.function untitled_OpeningFcn(hObject, eventdata, handles, varargin)% This function has no output args, see OutputFcn.% hObject handle to figure% eventdata reserved - to be defined in a future version of MATLAB% handles structure with handles and user data (see GUIDATA)% varargin command line arguments to untitled (see VARARGIN)% Choose default command line output for untitledhandles.output = hObject;50% Update handles structureguidata(hObject, handles);% UIWAIT makes untitled wait for user response (see UIRESUME)% uiwait(handles.figure1);% --- Outputs from this function are returned to the command line.function varargout = untitled_OutputFcn(hObject, eventdata, handles) % varargout cell array for returning output args (see VARARGOUT);% hObject handle to figure% eventdata reserved - to be defined in a future version of MATLAB% handles structure with handles and user data (see GUIDATA)% Get default command line output from handles structurevarargout{1} = handles.output;% --- Executes on button press in pushbutton1.function pushbutton1_Callback(hObject, eventdata, handles)% hObject handle to pushbutton1 (see GCBO)% eventdata reserved - to be defined in a future version of MATLAB% handles structure with handles and user data (see GUIDATA)% Selecting an input image from user clc[J P]=uigetfile('*.*','Select an image');I =(imread(strcat(P,J)));axes(handles.axes1),imshow(I)I=handles.I;guidata(hObject, handles);% --- Executes on button press in pushbutton2.function pushbutton2_Callback(hObject, eventdata, handles)51% hObject handle to pushbutton2 (see GCBO)% eventdata reserved - to be defined in a future version of MATLAB% handles structure with handles and user data (see GUIDATA)handles.I=I;[gT,nI] = imdiffuseest(I); % pixel diffusionnum_iterations = 100; % number of iterations for chaos mapchaotic_param = 0.5; % parameter for chaos map% Generate Spatio chaotic chaotic_map = zeros(size(I));for i = 1:num_iterations chaotic_map = gT*chaotic_param * chaotic_map .* (1 - chaotic_map);endkey = randi([0, 1], [1, length(chaotic_map)]); % encryption key% Convert image pixels to DNA sequencedna_seq = image2dna(I);% key = randi(size(1,length(dna_seq))); % encryption key% key = randi([0, 1], [1, length(dna_seq)]); % encryption key% Encrypt DNA sequence using chaotic map and keyencrypted_dna_seq = xor(dna_seq, key);encrypted_dna_seq = chaotic_map .* encrypted_dna_seq;% Convert encrypted DNA sequence to imageencrypted_img = dna2image(encrypted_dna_seq, size(I));handles.encrypted_img=encrypted_img;key=handles.key;axes(handles.axes2),imshow(encrypted_img),title('Input Image')guidata(hObject, handles);52% --- Executes on button press in pushbutton3.function pushbutton3_Callback(hObject, eventdata, handles)% hObject handle to pushbutton3 (see GCBO)% eventdata reserved - to be defined in a future version of MATLAB% handles structure with handles and user data (see GUIDATA)encrypted_img=handles.encrypted_img;handles.key=key;DNAmatrix=image2dna(encrypted_img);D1=dna2bin(DNAmatrix);PT=imdiffuseest(D1);PT1=bin2dna(PT);PT2=dna2image(PT1);final=xor(PT2,key);axes(handles.axes3),imshow(final)handles.final=final;guidata(hObject, handles);% --- Executes on button press in pushbutton4.function pushbutton4_Callback(hObject, eventdata, handles)% hObject handle to pushbutton4 (see GCBO)% eventdata reserved - to be defined in a future version of MATLAB% handles structure with handles and user data (see GUIDATA)final=handles.final;axes(handles.axes4),imhist(final)guidata(hObject, handles);% --- Executes on button press in pushbutton5.function pushbutton5_Callback(hObject, eventdata, handles)% hObject handle to pushbutton5 (see GCBO)% eventdata reserved - to be defined in a future version of MATLAB% handles structure with handles and user data (see GUIDATA)I=handles.I;axes(handles.axes5),imshow(I)53% --- Executes on button press in pushbutton6.function pushbutton6_Callback(hObject, eventdata, handles)% hObject handle to pushbutton6 (see GCBO)% eventdata reserved - to be defined in a future version of MATLAB% handles structure with handles and user data (see GUIDATA)I=handles.I;disp('Enter 1 for JPEG compression attack');disp('Enter 2 for Rotation attack');disp('Enter 3 for noise attack');disp('Enter 4 for Scaling attack');INN=input('Please Enter your choice');if INN==1 CF=5; imwrite(I,'comp_orig.jpg','Quality',CF); I_attack=imread('Comp_orig.jpg');endif INN==2 I=imrotate(I,1);  I_attack=imresize(I,[256 256]);endif INN==3  I_attack=imnoise(I,'gaussian',0.001);endif INN==4 I_attack=I.*1.1; endI_attack=handles.I_attack;axes(handles.axes6),imshow(I_attack)% --- Executes on button press in pushbutton7.function pushbutton7_Callback(hObject, eventdata, handles)54% hObject handle to pushbutton7 (see GCBO)% eventdata reserved - to be defined in a future version of MATLAB% handles structure with handles and user data (see GUIDATA)I=handles.I_attack;[gT,nI] = imdiffuseest(I); % pixel diffusionnum_iterations = 100; % number of iterations for chaos mapchaotic_param = 0.5; % parameter for chaos map% Generate Spatio chaotic chaotic_map = zeros(size(I));for i = 1:num_iterations chaotic_map = gT*chaotic_param * chaotic_map .* (1 - chaotic_map);endkey = randi([0, 1], [1, length(chaotic_map)]); % encryption key% Convert image pixels to DNA sequencedna_seq = image2dna(I);% key = randi(size(1,length(dna_seq))); % encryption key% key = randi([0, 1], [1, length(dna_seq)]); % encryption key% Encrypt DNA sequence using chaotic map and keyencrypted_dna_seq = xor(dna_seq, key);encrypted_dna_seq = chaotic_map .* encrypted_dna_seq;% Convert encrypted DNA sequence to imageencrypted_img = dna2image(encrypted_dna_seq, size(I));handles.encrypted_img=encrypted_img;axes(handles.axes7),imshow(encrypted_img)% --- Executes on button press in pushbutton8.function pushbutton8_Callback(hObject, eventdata, handles)% hObject handle to pushbutton8 (see GCBO)% eventdata reserved - to be defined in a future version of MATLAB55% handles structure with handles and user data (see GUIDATA)encrypted_img=handles.encrypted_img;handles.key=key;DNAmatrix=image2dna(encrypted_img);D1=dna2bin(DNAmatrix);PT=imdiffuseest(D1);PT1=bin2dna(PT);PT2=dna2image(PT1);final=xor(PT2,key);axes(handles.axes8),imshow(final)% --- Executes on button press in pushbutton9.function pushbutton9_Callback(hObject, eventdata, handles)% hObject handle to pushbutton9 (see GCBO)% eventdata reserved - to be defined in a future version of MATLAB% handles structure with handles and user data (see GUIDATA)axes(handles.axes1),imshow([255])axes(handles.axes2),imshow([255])axes(handles.axes3),imshow([255])axes(handles.axes4),imshow([255])axes(handles.axes5),imshow([255])axes(handles.axes6),imshow([255])axes(handles.axes7),imshow([255])axes(handles.axes8),imshow([255])% --- Executes on button press in pushbutton10.function pushbutton10_Callback(hObject, eventdata, handles)% hObject handle to pushbutton10 (see GCBO)% eventdata reserved - to be defined in a future version of MATLAB% handles structure with handles and user data (see GUIDATA)close